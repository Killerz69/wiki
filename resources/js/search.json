[[{"i":"#","p":["A wiki by the AOPC community enriched with various guides and docs"]},{"i":"welcome-to-the-aopc-wiki","l":"Welcome to the AOPC Wiki!"},{"l":"Exclusive to Android on PC related topics"},{"i":"here-you-can-find-very-detailed-guides-for-it-such-as","l":"Here you can find very detailed guides for it, such as:","p":["Android-x86 installation in various ways","Troubleshooting common android-x86 bugs","Special development tips and guides for developers","User and developer guides for GearLock recovery","Check the left sidebar to find what you need! You should read all the docs carefully unless you wanna run into trouble, we won't care to help you at all if you don't. So mind it!"]},{"l":"Contributing","p":["Want to suggest/propose imporvements to this Wiki? Simply click on \uD83D\uDCDD Edit this page button over any page on our Wiki.","Create a pull request once you have made your edits via Github.","If you are new to markdown or if you want to rice up your text then please check the following links for refernece:","Markdown basics","Additional styling components"]}],[{"l":"Chapter 1"},{"l":"Ways of installing Android-x86","p":["Move ahead to the next page"]}],[{"l":"Windows","p":["Due to how Android-x86 is structured, it can be installed in any system. It mainly depends if the boot-loader can boot the system from that File-System.","But since its forked from Linux, it has the best performance in Ext4 File-System.","Here we are gonna learn How to Install Android-x86 on NTFS/ext4. But the process is similar in any File-System."]},{"l":"Preparation","p":["To install Android-x86 we are gonna need 3-4 things.","The boot-loader or Grub or Grub2win","The ISO of course","A tool to create the data.img(For example makeData).","Ex2fsd+ a partition manager that supports ext4 formatting if you want to work with ext4 File-System"]},{"l":"Step-1 The Android-x86 Folder","p":["Android-x86 can be booted from root of partition or from any folder or sub-folder. We are going to install it in a sub-folder Android_x86 in App folder in our D drive. After creating the folder copy the kernel, ramdisk.img, system.img/system.sfs, initrd.img, gearlock(if exists) from the ISO to the folder.","And that's step-1."]},{"l":"Note for Ext4","p":["Use a partition manager to format partition as ext4. Than use Ext2fsd to assign drive letter to access it from File Explorer."]},{"l":"Step-2 The Data Partition","p":["Use any tool or the makeData tool to create data.img file. This will serve as the SD-card for the system. makeData will ask for SD-card size in GB. Provide at least 8 GB for efficient gaming. Now move that created data file to the folder where we copied files from ISO to(Android_x86 folder in App folder).","Please don't use data.img of one installation on another. Create a fresh data on every install. Or the system might not boot."]},{"i":"note-for-ext4-1","l":"Note for Ext4","p":["You don't need to create data.img as Androidx86 natively supports this File-System. So just a folder named data will do."]},{"l":"Step-3 The Bootloader","p":["Now the last part. Install Grub2win from here. Please don't use any external links as there are reports of malware injected inside them. After installation open Grub2win. Go to Manage boot menu and select Add entry. Select type as Android, Give a name and at last click the Select A new Android Kernel File button. This will open a explorer. Now browse to the folder where we copied the files from ISO and open the kernel file. The texts in box 1 and 2 should change according to your folder. Append any kernel parameter you want to add to box 2. Hit apply and your done.","image"]},{"i":"step-4-another-step","l":"Step-4 Another Step?","p":["No this is just some warnings and tips for your better experience.","Don't use the Ext2fsd too much as it is not 100% accurate and might kill the Androidx86. Instead use the FX Explorer app as NTFS partitions are mounted in it.","There is no such thing as best Android-x86. If the system runs slow, try changing the kernel/mesa or apply some tweaks from gearlock or lspeed, FDE.","There is no such thing as best kernel/mesa. Each device works with specific kernel. Some devices works on all. And there's no magic word to tell which will work for your device. Just pick 4.19 series of kernel and mesa 18 and try to go up and down.","If you got NVidia GPU, pray to God that it works or just use emulator if GPU is good enough.","Install kernel/mesa from gearlock recovery.","Happy Gaming ;)"]}],[{"l":"Linux","p":["Android-x86 is just a highly modified Linux. As a result, it has lot of similarities with Linux. So installing Android-x86 from Linux is easier than installing from Windows where only limited number of File-System is supported. Here We will learn How to install Androidx86 from Linux. As a Linux user, basic command line knowledge is expected. This guide is mainly focused on Ext4 and NTFS File-System. Both can be done on any."]},{"l":"Preparation","p":["To install Android-x86 we are gonna need 4 things.","The boot-loader or Grub","The ISO of course","Basic terminal knowledge"]},{"l":"Step-1 The Android-x86 Folder","p":["Android-x86 can be booted from root of partition or from any folder or sub-folder. We are gonna install it in a sub-folder Android_x86 in App folder in our target drive. After creating the folder copy the kernel, ramdisk.img, system.img/system.sfs, initrd.img, gearlock(if exists) from the ISO to the folder.","And that's step-1."]},{"l":"Step-2 The Data Partition","p":["Since Android-x86 is Linux inside, it natively supports Ext4. So we can just make a folder named data in our Android-x86 folder."]},{"l":"Note for OtherFS","p":["You need to create data.img as Android-x86 being a striped down Linux, natively supports only ext4 File-System. So just a folder named data will not do. To create data.img","Please don't use data.img of one installation on another. Create a fresh data on every install. Or the system might not boot."]},{"l":"Step-3 The Bootloader","p":["Now the last part. Install Grub2 and open nano or some text-editor as root. Edit the file /boot/grub/grub.cfg and add these line to the end.","At first line, replace Android-x86 with what ever you want to show at Grub menu. And replace FOLDER_NAME with the folder path to your Android-x86 system. For this case it is /App/Android_x86. Add any kernel configuration you have after SRC=$android in same line.","Please be extra careful as failing to write properly might make grub menu not accessible. This will lead to grub shell."]},{"i":"step-4-another-step","l":"Step-4 Another Step?","p":["No this is just some warnings and tips for your better experience.","There is no such thing as best Android-x86. If the system runs slow, try changing the kernel/mesa or apply some tweaks from gearlock or lspeed, FDE.","There is no such thing as best kernel/mesa. Each device works with specific kernel. Some devices works on all. And there's no magic word to tell which will work for your device. Just pick 4.19 series of kernel and mesa 18 and try to go up and down.","If you got NVidia GPU, pray to God that it works or just use emulator if GPU is good enough.","Install kernel/mesa from gearlock recovery.","Happy Gaming ;)"]}],[{"l":"Chapter 2"},{"l":"Fixing common issues of Android-x86","p":["Move ahead to the next page"]}],[{"l":"Booting","p":["In this page we will try to cover the most common booting issues people face."]},{"l":"Grub2Win Boot Entry Missing","p":["If your PhoenixOS DarkMatter grub2win entry is missing from the boot-menu then you can follow this.","Open C:/grub2/grub.cfg with a text editor (Notepad++)","Copy and paste this code at the bottom of that file.","Download the file below and copy in C:/grub2/windata/customconfigs","Booting"]}],[{"l":"Sound","p":["Need to write and even more pages ..."]}],[{"l":"Wifi and Ethernet","p":["Need to write and even more pages ..."]}],[{"l":"Gathering Logs"},{"l":"GearDump automated log gathering","p":["GearDump is an automated log collection tool to help boost the debugging process on user-reported issues. It was originally made for GearLock but now it can be helpful for the whole operating-system log collection as well.","Press ALT+F1 or use any terminal emulator/tty.","If you can't boot into the android-GUI then get into recovery mode from your grub menu and open Virtual Command Terminal there.","Run geardump command.","Then you can find the zipball at both /data and at the root of your operating-system-Partition. You may grab it from one of these suitable locations in your favor."]},{"l":"Manual log gathering","p":["Manual log gathering is useful when you can not run geardump.","First of all you will need to get into a terminal where you can execute commands.","Press Alt + F1 or fn + Alt + F1(laptop)","If that is not working then install TermOneplus app and open it.","Then run su in TermOneplus app.","Boot into recovery mode from grub","Select option 3. Open Virtual Command Terminal","We will create a directory and save all the logs there.","Now you can proceed with grabing logs from the components stated below."]},{"l":"dmesg"},{"l":"lsmod"},{"l":"lsusb"},{"l":"logcat","p":["Logcat does not work in recovery-mode. Normally you can only run it after the android bootanimation. (Aka android-interface)","Assuming that you are in /data/mylogs directory as instructed above.","Run the following command while being in /data/mylogs:","Now lets find the archived logs.tar file for uploading to a dev","Run the following command in your terminal:","Then you can find it on your Internal Storage from a file-manager.","Mount your Android-x86 partition","If you have a directory called data inside it then you should find logs.tar at data/mylogs","Or if you have data.img then mount it with the following command and look at dmount/mylogs for logs.tar:","Open the folder where you have Android-x86 installed.","If you have data.img then use 7-zip to open it.","If you have data folder then open it normally.","Look for a folder called mylogs and you should find logs.tar there.","If you had installed Android-x86 inside an Ext4 partition from Windows then use the appropriate program to mount it. E.g Paragon LinuxFS, Ext2fsd"]}],[{"l":"Android-x86 internal components","p":["In this section we will discuss about some of the internal components of Android-x86.","We will try to:","Describe what is the use of them","Share some tips","FAQ"]}],[{"l":"Mesa"},{"l":"Gallium HUD","p":["\"It’s a highly customizable Heads-Up Display (HUD) capable of displaying some extremely helpful information.","Add this line into the file :","After decide which one to use and customize your own HUD, save the edit and then reboot.","For all Intel GPUs I recommend using the upcoming Mesa 21.2 if you want to try to experience this feature.","For example, these are the variables I use","If you wonder which Intel GPU you are using (different from CPU gen) then you can check this wikipedia page : https://en.wikipedia.org/wiki/List_of_Intel_graphics_processing_units","NOTE : There seems to be no document relate to GALLIUM_HUD_SCALE so please report to us if you know how to use it","On Android-x86, Gallium HUD can be enabled on Mesa 18.1+ if you are using AMD GPUs or Nvidia GPUs (nouveau). On Intel GPUs, Gallium HUD can be enabled on Gen8+ using Mesa's new iris graphic driver. On older Intel GPUs, with the new crocus driver you can now be able to use it too.","Or, if you just want a small fps meter, you can use simple option","Source : https://manerosss.wordpress.com/2017/07/13/howto-gallium-hud/","The hud is part of Mesa, so if you’re using the open-source drivers you’re ready to use it without any external package.\"","There are other optional variables you can set as well","This is the main environment variable to activate the hud.","To easily activate Gallium HUD on any Android-x86 build, go to /system/etc/init/surfaceflinger.rc","To know which value to set in each variables, you can read this post as a reference, it shows very detail about how you can customize the HUD. https://manerosss.wordpress.com/2017/07/13/howto-gallium-hud/","You will see the HUD on the position you set (default is on the left side)"]}],[{"l":"WIP"}],[{"l":"Device Compatibility Index"}],[{"l":"Guides","p":["This section is intended to cover some mixed misc. questions.","Head on to the next pages to see more."]}],[{"l":"Allow Apps Run in the Background","p":["By default android battery saving patterns reduce the background activities of running apps unless they are explicitly excluded in framework level or via android-settings battery-optimization panel if in favor.","Here I will show some possible methods to keep background apps alive. Please note that this is specific to the android-x86 platform."]},{"l":"On Android-x86","p":["Open Settings app from your app menu.","Find the option which says Battery.","Look for a button called Battery Optimization. This can be found in different forms, such as:","Clicking on the top right toggle with three-dots.","Checking the Advanced Settings(Mostly in Android-Pie{9}+)","Once you are in the Battery Optimization page, select Not Optimized from the top-menu.","Later you can select any app to disable battery-optimization for it and it should stay alive in the background afterwords."]},{"l":"On BlissOS-x86","p":["Same instructions as Android-x86"]},{"l":"On PhoenixOS-x86","p":["Open Security app from your app-menu.","Select Autostart menu.","Toggle on any app you wish to keep alive in the background."]}],[{"l":"Run Android-x86 on Linux Distro","p":["There are various ways to emulate android-x86 within linux distributions.","Here we will try to mention a few and explain their procedure where possible."]},{"l":"Anbox","p":["Anbox Website"]},{"l":"DockDroid","p":["See on Github"]},{"l":"KVM","p":["You can use virt-manager GUI application to deal with creating KVM instances on the fly.","KVM homepage"]},{"l":"Instructions","p":["wip..."]},{"l":"Qemu Virgl","p":["See forum post"]},{"l":"Virtualbox","p":["wip..."]},{"l":"Xdroid","p":["Xdroid Download Page"]}],[{"l":"GearLock","p":["Let's get started ..."]}],[{"l":"Chapter"},{"i":"user-guide--documentaion","l":"User guide / documentaion","p":["Hit the next page!"]}],[{"i":"gxpm---the-gearlock-package-manager","l":"gxpm - The GearLock Package Manager","p":["Need to write and even more pages ..."]}],[{"l":"Installation and Updating","p":["So here we gonna learn ways of installing GearLock in your desired android-x86 system. There are several ways of doing so, you just need to pay some attention and read everything properly to avoid errors."]},{"l":"Get the latest GearLock installer binary","p":["Simply head over to this link and click on Download button."]},{"l":"Place the binary anywhere inside android filesystem","p":["In this guide we will copy gearlock installer-binary to either Main Storage or Internal Storage or /sdcard from a file manager.","I'm using FX File Explorer for moving gearlock installer-binary to Main Storage(aka the Internal Storage) from my Downloads folder."]},{"i":"switch-to-command-terminal--console","l":"Switch to command terminal / console","p":["Now press either Alt + F1 or fn + Alt + F1 for switching to a command terminal.","If the buttons are not working as suggested above then install Termoneplus terminal emulator and open it."]},{"l":"Run the installer binary","p":["Once you're in a black terminal prompt, type in the following and press Enter key after each line."]},{"l":"Select your operating-system partition in the installer","p":["So, at this stage you should have the installer-binary running. I have my android-x86 operating system installed inside the 7th partition called Android. Enter the partition number of your android-x86 installation."]},{"l":"Installation complete","p":["Congrats, you have successfully installed GearLock. Now you should check the next pages in this chapter to learn about the amazing things you can do with it :)"]},{"l":"Updating","p":["You will get notified in GearLock when there is a new update available.","You will be able to update directly from GearLock metro more Updater","You can also follow the same instructions of Installing GearLock as described in the beginning of this page to perform a update over an existing version and the old version will be overwritten."]},{"l":"Video guides","p":["I seriously don't prefer to follow video guides, only mentioning them here just if they are any useful to you...","These video tutorials can be outdated, proceed at your own risk!"]},{"l":"Troubleshooting","p":["Todo.."]}],[{"l":"Chapter"},{"i":"developer-guide--documentaion","l":"Developer guide / documentaion","p":["Hit the next page!"]}],[{"l":"Getting Started"},{"l":"Introduction","p":["First of all, you will need basic scripting knowledge in bash. Not only that, if you have experience with python then you also make the good use of it.","There are two kinds of package which you can use.","Prebuild Kernel Package","Prebuild Mesa Package","Custom Core Package","Note: It doesn't matter what package you use, prebuild-kernel package is here to make it easier on making kernel packages quickly. There isn't any functional change between custom-core& prebuild-kernel package.","Protip: If you want to build a Mesa/Kernel package easily, then the best way is to use the on-device GearLock GDK. (Means there is a option to AutoMake Kernel/Mesa Package from your booted kernel/mesa in GearLock More Dev-Zone on an android-x86 OS with GearLock installed)"]},{"l":"Setup build environment","p":["There are two ways in which you can work with gearlock packages.","From an android-x86 system with GearLock installed.","Using the linux dev-kit for GearLock"]},{"i":"-from-an-android-x86-system-with-gearlock-installed","l":"+ From an android-x86 system with GearLock installed","p":["Either open GearLock App or run gearlock in Alt + F1 terminal.","Then go to More Dev-Zone and you should have all the extended dev-kit options.","Use option 1 to setup build environment"]},{"i":"-using-the-linux-dev-kit-for-gearlock","l":"+ Using the linux dev-kit for GearLock","p":["Clone the repo from github","Execute ./configure to setup build environment","To build your package/extension, execute ./build"]},{"l":"Custom-core package","p":["Structure of custom-core package:"]},{"l":"Pre-build kernel package","p":["The pre-build kernel package has everything ready for you. You have to just place your corresponding kernel files.","Structure of pre-build kernel package:"]},{"i":"zygotesh-configuration","l":"!zygote.sh configuration","p":["!zygote.sh is the file which holds your package/extension information and defines how it will act upon installation through GearLock. You can either manually modify it or dev-kit will ask during build.","Note: All the variables in !zygote.sh are accessible within anything inside your package during installation."]},{"i":"installsh--uninstallsh-exit-code","l":"install.sh / uninstall.sh exit code","p":["Even if you do exit on your install.sh GearLock will attempt to run the additional jobs such as generating uninstallation script, checking for reboot request and so on. Because GearLock doesn't know whether you're assuming the operation successful or not. So, to tell GearLock that there has been an error and it shouldn't proceed further with the additional jobs then you can return special code which GearLock can read.","You can acheive this in the following way:","For uninstall.sh you have to use return 101 instead of exit 101 since gearlock will convert it into a function."]},{"i":"extension-scriptexecutable","l":"Extension script/executable","p":["If you want to push a script/executable which can operate whithin gearlock for users then you should do it on ./gearlock/extension.sh","Once someone install your package/extension, they will be able to execute the extension through GearLock Extensions","Note: You don't have to manually copy or remove extension.sh, GearLock will take care of that.","If you're using custom-core package and if you don't want to make an extension then you must delete ./gearlock/extension.sh","Protip: For live-testing how a extension works, put any executable on $GHOME/extensions Then do GearLock Extensions"]},{"l":"GearBoot Executables","p":["GearBoot executables are executed during boot. Note: You don't have to manually copy or remove gearboot executables, GearLock will take care of that. Check custom-core package structure and GearBoot page."]},{"l":"Uninstallation modes","p":["GearLock Package Manager deals with package/extension uninstallation system with much effiency. Which also includes auto uninstallation script generation.","There are three uninstallation modes.","With GEN_UNINS=yes in !zygote.sh& custom code in uninstall.sh","Merges generated uninstallation script and from uninstall.sh","With only GEN_UNINS=yes in !zygote.sh& uninstall.sh removed","Only merge generated uninstallation script","With only uninstall.sh and GEN_UNINS=no","Only merge uninstall.sh","Note: If you don't script any custom uninstallation code in uninstall.sh then you can either remove that file or just leave it as-is. Also, You don't have to manually copy or deal with uninstall.sh, GearLock will take care of putting it in the right place and removing it when necessary","When GEN_UNINS is set to yes, GearLock will generate an uninstallation script based on the files that you put on either system or data folder. You can also mix up/use GEN_UNINS and your custom uninstall.sh together."]}],[{"l":"Environment Variables"},{"l":"Introduction","p":["The GearLock environment variables can be used to access some common data. You must keep in mind that these are only useable during GearLock or GearBoot runtime."]},{"l":"Variables","p":["* Global ones are available on both GearLock & GearBoot","ANDROID_VER","BOOTCOMP","DATE","DEPDIR","GBDIR","GBRUNTIME","GearBoot only","GearLock Only","GEARLOCK_APP","GEARLOCK_RC","GEARLOCK_VER","GHOME","Global","GRLOAD","GRROOT","GRROOT_DIR","GTMP","HOST_ARCH","IT","KERNEL_IMAGE","RECOVERY","SDK","STATDIR","TERMINAL_EMULATOR","YEAR"]},{"l":"GRROOT_DIR","p":["This is the place where GearBoot mounts the android-x86 OS partition.","On calling this var it will return /gearlock/gearroot"]},{"l":"GRROOT","p":["This is the place where the actual android-x86 OS files exist.","By this I mean the place where you find files like initrd.img ramdisk.img kernel","On calling this var it will return the directory path where the actual OS files exist."]},{"l":"HOST_ARCH","p":["On calling this var it returns either x86 or x86_64","Note: This is not 100% accurate since it's depended on lib64 dir existence. (A better implementaion is suggested)"]},{"l":"ANDROID_VER","p":["Return's android version code, like 7.1/8.0/9.0 ++","Note: It's based on ro.build.version.sdk"]},{"l":"SDK","p":["Return's the SDK version code."]},{"l":"GBRUNTIME","p":["The value of this var is set to yes when GearBoot is running during boot. Otherwise it's empty.","Example:","Output: yes"]},{"l":"DATE","p":["Returns current date."]},{"l":"YEAR","p":["Returns current year."]},{"l":"GHOME","p":["ghome is the place where GearLock stores extensions, gearboot scripts, common dependencie directory, status log files. It also contains the .gearlockrc","If gearlock came pre-installed into your system then $GHOME path should be /system/ghome While if it was a manual installation then $GHOME path should be /data/ghome Note: It doesn't matter even if you move swap it between /system& /data.","Other vars depended on $GHOME>","DEPDIR=$GHOME/dependencies","STATDIR=$GHOME/status","GBDIR=$GHOME/gearboot"]},{"l":"GTMP","p":["$GTMP path is /gearlock/tmp","This place is temporary and gets cleaned up on boot.","Only use this for storing small temp files if you want to use this place."]},{"l":"GRLDIR","p":["Returns the path for gearload directory"]},{"l":"RECOVERY","p":["When the user is running GearLock in early Recovery mode this is set to yes. Otherwise it's empty."]},{"l":"IT","p":["The interface which is being used. From either classic or metro."]},{"l":"BOOTCOMP","p":["Is yes or not empty once the OS has completely landed on GUI. Otherwise it returns no."]},{"l":"KERNEL_IMAGE","p":["Full accessible path to currently booted kernel image."]},{"l":"GEARLOCK_RC","p":["Full path to .gearlockrc file within $GHOME."]},{"l":"TERMINAL_EMULATOR","p":["Returns yes when the user is using GearLock from within the GUI (Except tty) throough some terminal emulation application. (This includes $GEARLOCK_APP also). Otherwise it returns no."]},{"l":"GEARLOCK_APP","p":["Returns yes when GearLock terminal application is running. Otherwise it returns no."]},{"l":"GEARLOCK_VER","p":["Returns GearLock version code."]}],[{"l":"Developer Utilities"},{"l":"Introduction","p":["GearLock brings a wide range of prebuild linux utils that you may find in a well-known linux distro nowadays. You get things like bash, python and so on! There are also some additional build-in functions which can ease your scripting work. Lets start with the basics. (bash specific)"]},{"l":"geco","p":["You can use geco to print anything on the terminal with color/underline/blink option.","Normal output Example:","Note: You must quote your message if it contains any special characters or spaces."]},{"l":"geco color output","p":["Syntax","Example:"]},{"l":"Color codes for geco","p":["Basic","Bold","Underline","$","Note: Here ${RC} is used to reset the color to normal. Otherwise your whole terminal screen would get messed up!"]},{"l":"geco extensions"},{"l":"gecca","p":["gecca can print the output from a text file into the middle of your terminal screen.","Example:","Output:"]},{"l":"gecpc","p":["gecpc can print a line with full width of your screen","Example:","Output:"]},{"l":"Advanced geco usage","p":["Example:","For a live practice, try this and see for yourself:","For example:","geco alternatives: echo printf","Geco always prints with a partly hidden \\n newline character. It might be a bit hard to notice it but it actually works like that.","Hello, world!","If linux is your daily driver then you should be obviously fimiliar with the things that I'm about to show you.","If you want to do something trickiy then you can exclude the newline.","Just in the way you exclude the hidden \\n newline with \\c, it's just doing the opposite. Which is, you include it!","Notice that it has two extra newlines instead of one. (1 by default + 1 because of an extra /n char)","Notice the \\c, it's used at the end of your message to avoid making a newline \\n character.","Output:","Then:","To make the concept clear with a more practical example:","Which gives:","While if you do (without \\c character at the end of you message)","You can include as many newlines you like."]},{"l":"figlet","p":["figlet can print real-time ascii art from text. If you've used this on a typical linux distro then you might already know what this is.","With default font: figlet text","Example: figlet Hey","With a custom font: figlet -f font-name text","Example: figlet -f graffiti GearLock","Available fonts: banner big block bubble digital graffiti hex ivrit lean mini mnemonic script shadow slant small smscript smshadow smslant standard(default) term"]},{"l":"nout","p":["nout comes with GearLock which can make it easy for you to silence almost any command.","For example, lets say that you want to delete a file but you don't want to have any error output for that if any error occours.","So, if you do something like:","rm /system/wackadua","And then rm gives the output:","rm: cannot remove '/system/wackadua': No such file or directory","Which if you want to silent then you can:","nout rm /system/wackadua","Output:","As you can see, no output came out but the command was surely done. Although you should always test out each of the command that you silence to be sure that it actually ran instead of doing nothing."]},{"l":"gclone","p":["For doing the copy-paste job easily over file & folders you get to use gclone and you must use it! gclone is initially rsync and it's just here to make it a bit more quicker to do the thing while showing a human friendly progress bar.","With progress indicator gclone /source /terget","Example: gclone /system/priv-app/GmsCore /sdcard/Downloads","Without progress indicator gclone -q /source /terget","Example: gclone -q /system/build.prop /data/adb","You can also use rsync for advanced use since gearlock brings pretty much all the native linux utils that you may find in a well-known linux distro nowadays.","gclone alternatives: cp rsync cat mv"]},{"l":"gkillapp","p":["gkillapp can easily stop a running android app with the package-id.","Syntax","gkillapp package-id","Example","Note: If the app is not running then gkillapp will print an error message."]},{"l":"gslr","p":["GearLock search line and replace(gslr) can scan a readable file for a word or line and replace the result with the specified text.","Usage: gslr terget-file text-to-search the-text-to-replace-result","Example:","Note: Gslr only takes the first line which was found as the result and will return an error if not found.","gslr alternatives: sed awk"]},{"l":"gearprop","p":["gearprop can help when you need to modify multiple system props. It also got the capability to force overwrite any kind of property. (Bypassing setprop limitations) There are two ways you can acheive this, which are:","Through a variable","From a readable text file"]},{"l":"Through a variable","p":["Define your props inside a var in prop value format. Which obviously is supposed to be called from a script.","An example:(from gearprop --help)","Note: You must always use quotes while calling your variable."]},{"l":"From a readable text file","p":["This is also pretty simple and straightforward. Just like the variable method, define your props in prop value format in your text file.","Let's assume you have a text file named myprops.txt","Then you can do:","Extra notes: You can define your props in prop=value format also but thats deprecieated. Also, you can specify multiple variable or files together. GearProp initially passess all the processed data to gearprop-helper and it does the rest.","gearprop alternative: setprop"]},{"l":"gearhost","p":["GearHost can be used to reroute static ip's with the same implementation as in /system/etc/hosts but dynamically.","The usage is same as gearprop.","Try gearhost --help in the command line to learn more."]},{"l":"ckdirex","p":["ckdirex checks whether if the specified folder exist, if not then it makes that folder with an optional permission.","Syntax","Example (with optional-permission)","Example (without specifying any permission)"]},{"l":"garca","p":["garc is basically a fork of 7z. You can use it to extract almost any archive.","Note: garc comes with additional zstd support.","Basic Syntax","Example","All functions","garc alternatives: 7z tar gzip bzip2 cpio zcat zip"]},{"l":"get_base_dir","p":["This is a GearLock-Only function. You can not use it outside GearLock.","When you call the function get_base_dir from a script, it return's the base directory path from where that script is being executed in $BD variable.","Hint: This function is implemented on the install.sh of both core& prebuild-kernel package."]},{"l":"get_net_stat","p":["This is a GearLock-Only function. You can not use it outside GearLock.","When you call the function get_net_stat from a script","While the host system is connected with internet","NET_CONN=yes and return code is 0","While the host system is not connected with internet","NET_CONN=no and return code is 1","Example script for practice:"]},{"l":"check_compat","p":["If you want to check whether the host user is running a GearLock version which might not be compatible with your package/extension then you can call check_compat function.","Usage: check_compat minimum-terget-version","Example:","Let's say the user is running GearLock 6.1, thus it will return 1 as the return-code and an additional variable as COMPAT=no.","While if the user is running GearLock 6.1 or higher version it will return 0 and COMPAT=yes"]},{"l":"linux utils","p":["Take a look at /gearlock/bin to know about all the linux utils which are available for use!","Protip: Run bash in terminal and feel the real power ;) Say goodbye to sh!"]}],[{"l":"GearBoot Documentation"},{"l":"Introduction","p":["GearBoot is a very simple program which can run executables during boot dynamically. GearBoot supports four different boot stages.","init","post-fs","post-fs-data","boot-post","boot-comp","GearBoot is very lightweight and superfast. It assigns each of the executables with a unique PID.","The logfile is /gearlock/tmp/gearboot.log","During GearBoot runtime PATH variable is set to:","If GearLock came pre-installed in your system then gearboot dir can be found at /system/ghome If it was a manual installation then it should be at /data/ghome","For most developers boot-comp stage should be fine and shouldn't mess with other stages unless you know what you're doing!","Use the custom-core package to work with gearboot scripts"]},{"l":"Boot-Stage Defination","p":["To be honest, the first three stages ( post-fs post-fs-data and boot-post) are passed real quick but there are some key changes in between.","Below I will try to explain what and how each of the gearboot stages that matter."]},{"l":"init","p":["This is basically valid before you see the early console-tty blinking after grub has loaded your kernel and is about to switch on the secondary-ramdisk. In this stage android-system won't be running or active. Not a good idea to think of hooking into it unless you know what you're doing."]},{"l":"post-fs","p":["There are actually a few more * early stages before post-fs to be completed when android-x86 switches to the secondary ramdisk. Now you might be wondering why don't we just hook those stages also ?","In simple words, it's literally unnecessary and not really a good thing to do. Even hacking into something over the post-fs stage also seems quite rare though.","As much I can understand, this stage can be marked when you get to see the OS hostname blinking in the early tty screen (command line). This is also two steps before you see the bootanimation to be appearing."]},{"l":"post-fs-data","p":["This is obviously after post-fs stage. During this stage, build.prop and most of the system modules are already loaded. The bootanimation comes after this stage."]},{"l":"boot-post","p":["This is the beginning of bootanimation and is valid till android-x86 enter the graphical interface."]},{"l":"boot-comp","p":["This is after bootanimation then you see something like Android is loading... in graphical interface. To be noted that this is basically the final stage and no more stages are to come after this. For most cases it's suggested to target this stage for your executable."]},{"l":"Write GearBoot logfile","p":["gearboot.log is present in /gearlock/tmp which holds the records of what executables were run during each boot-stage. So if you want to write something over your executable name in the log then you can use write_gblog in your gearboot-executable.","So, let's say my-cool-program3 was your gearboot-executable and then gearboot.log was like","Now, if you do this in my-cool-program3(bash):","gearboot.log will be like:"]},{"l":"Manual trigger","p":["If you want to re-execute the boot executables without rebooting as a user then you can do it easily. (Not recommended)","From gearboot --help"]},{"l":"Also check","p":["GearProp can be useful while changing props during boot","Check GearBoot Executables section in GetStarted page","Take a look at environment variables","Must check out GearLock Dev Utilities"]}],[{"l":"Package or Extension Submission","p":["Successfully made your very own GearLock Package or Extension ?","Then it's time to make it public ! Yes, in the official way !","Go to https://supreme-gamers.com/resources and click on ADD RESOURCE button.","Then select Android-x86 category.","In that place you get version controlling, download stats, push-notifications, user-reviews and more !"]}],[{"i":"customizing-gearlock-at-its-best","l":"Customizing GearLock at it's best","p":["GearLock is seriously extensive and customizable. In this page I will try to brief most of the customization options available for GearLock. Which covers the usage of gearlockrc and use of hook alongside some other miscellaneous customization options."]},{"l":"GEARLOCKRC","p":["$GHOME/.gearlockrc file gets loaded by GearLock core and it contains some of the GearLock settings that you can re-configure. Also, it can be used to overwite any of the core variables or functions of GearLock. This customization file can be also used to handle hook.","Here is the preview of default gearlockrc file.","Note: It can be outdated here, better check on your local version.","Most of the common options in this file can be also configured through GearLock Ui Settings."]},{"l":"GHOME","p":["Read about $GHOME at Environment-Variables page. If you're a developer and want to pre-define some settings and stuff then you can have your custom ghome dir as /system/ghome."]},{"l":"HOOK","p":["If you're a developer and willing to integrage GearLock in your android-x86 build then hook can be useful to you. GearLockUi default menu structure and most of the sub-elements of GearLock is dynamic and can be modified/extended easily. If you look at /gearlock/core and try to understand then it could be more clear to you.","The concept of hook is pretty simple. It is mainly there to merge everything from $GHOME/ hook/* into /gearlock/. So that you can modify core files of gearlock without having to touch the actual core.","You can also make the use of HOOK_DEL_FILES in gearlockrc to delete any file within /gearlock/* before GearLockUi runtime and loading hook."]},{"l":"Here is a messy tutorial about changing or adding a new item in GearLock Main-Menu","p":["So let's say you want to add your own menu item in GearLock Main-Menu.","But there is one problem you got, if you directly extract the gearlock cpio image which gets loded on each boot to modify the menu-structure then that's not reliable since your modifications will get lost on any future GearLock updates that the user will receieve. And everything inside hook dir gets replaced with the actual GearLock core before the Ui runtime.","And for that you can do the following:","Now if you look at /gearlock/core/main.src and /gearlock/core/main.src/_lang_/_menu_en you will realize these are what responsible for the GearLock Ui Main-Menu. It mainly calls the other sub-menus at /gearlock/core/*src and executes them as required.","Make a directory named hook at $GHOME and then it'd be $GHOME/ hook","Now if you wanna add a new menu element at the main-menu there are two things that you will need to replace/add.","For example, they could be:/gearlock/core/main.src/_lang_/_menu_en(Menu file with your new menu item record at end of line) && /gearlock/core/main.src/X(Your item executable)","Now what you need to do in your hook dir is, make another dir called core inside your hook dir. In the same way make other chid directories while replicating the actual /gearlock/core/* structure depending on your neeeds. After that place the corresponding files that you want to get replaced before GearLockUi runs."]},{"l":"Building GearLock inside AOSP-x86 source","p":["If you are compiling android-x86 from source and want to include GearLock with your builds then you can use this external repository containing patches for the aosp-x86 source.","Although, you could also boot into your OS and use the gearlock-installer executable and then pack up the patched initrd.img and gearlock(cpio image). Then modify install.img/scripts/0-install to copy gearlock image during installation."]}],[{"l":"Bigdroid","p":["In this chapter you can find bigdroid development guides."]}],[{"l":"Building a Bigdroid Project"},{"l":"Prerequisites","p":["Host utilities:","Bashbox:","Bigdroid:"]},{"i":"buildingcompiling","l":"Building/Compiling","p":["In this example we will build PhoenixOS DarkMatter.","At first we clone the project repository:","Now there are three two ways you can invoke the build command:","You can cd into the repository dir and then run it:","Or you can directly pass the dir path in bigdroid without changing your PWD:","Then you should find the output iso in target/release."]},{"l":"Advanced build command options","p":["If you do not want to compress system.img with squashfs:","If you want to stop the build process after injecting the hooks:","If you do not want to build ISO and stop at system.img creation:","Protip: Try bigdroid build --help"]}],[{"l":"Developer GUide"},{"l":"Creating a new bigdroid project","p":["If you want to create a new bigdroid project you can run the following:"]},{"l":"Working with hooks development","p":["All hooks must and will reside under ~/.bigdroid/registry.","If you want to create a new hook then use this template repository","As most standard bigdroid projects witll pinpoint hooks to a specific commit and branch in their Bigdroid.meta, so during hooks development related with such a project will conflict with your local changes. In order to ease your work and so that you don't have to constantly keep updating Bigdroid.meta for bumping a hook's commit hash you can use the --dev flag during build. More specifically this:","Once you are done with a particular hook, you can just grab the commit hash you want to use and put in your Bigdroid.meta","For example:","This will give you the HEAD short commit hash for the hook repo."]}],[{"l":"Chapter"},{"l":"Bootloader 101"}],[{"l":"Grub Installation","p":["Here we are gonna learn how to install grub from both Windows and Linux. Please note that it is recommended to know how to use terminal or CMD and basic knowledge of partition in order to install grub. If you don't know how, consider switching to Grub2Win."]},{"l":"Getting grub","p":["If your in Linux theres a high chance that grub-install is already there. If your in windows, well you can tell the Linux users \"Lazy\". Goto to this and download the packages that end with windows.zip."]},{"l":"Preparation","p":["Before we proceed to install grub we need to prepare a location for grub to be installed. The partition where grub is going to be installed is needed to be mounted. For windows it needs to be mounted with letter and for Linux it's a directory"]},{"l":"Windows","p":["For windows the partition is usually mounted unless its a special partition like EFI Partition. To mount the partition if its not mounted press Winkey + R to start run. There type diskmgmt.msc and hit OK.","Now a window will pop up and show all the disks and partition after loading. Right click the desired partition and select assign letter. Here we will assign the epic letter Z"]},{"l":"Linux","p":["For Linux if its not EFI partition or root partition, in most cases it needs to be mounted. Suppose we want to mount the partition sda1 on /mnt/grub. Now open up terminal and type these command.","And thats it!"]},{"l":"Installation","p":["Now the installation process for both windows and Linux is almost the same. You just need to specify installation target differently and also specify your firmware is legacy or UEFI. Suppose we want to install grub under boot folder on the target partition and. Now start terminal or CMD as administrator and type one of the commands according to your system.","Note: Index of drives can be found in diskmgmt.msc for windows"]},{"i":"windows-1","l":"Windows","p":["To install grub on our first disk which is disk 0 according to diskmgmt.msc we need to specify disk as \\\\?\\PhysicalDrive0","Note: Here A:\\ is the EFI partition of the disk"]},{"i":"linux-1","l":"Linux","p":["To install grub on our first disk which is disk 0 we need to specify disk as /dev/sda","Note:","Here /mnt/grub is the EFI partition of the disk. In case if its installed on same disk as where Linux is, it is usually mounted on /boot/efi","i386-pc for legacy system, i386-efi for 32bit EFI system, x86_64-efi for 64bit EFI system. If the target partition is removable drive like USB, add --removable.","Index of drives can be found in diskmgmt.msc in start menu for windows"]},{"i":"finally","l":"Finally!!","p":["And thats it! We have successfully installed grub. But by default grub doesn't generate any configuration file. This file is easy to generate in Linux but not so in windows(Lazy). On next page, we will learn how to configure grub configuration file. Now if you try to boot grub, it will stop at grub shell if installation was successful. Else it will stop at grub-rescue shell which has only some basic functionality to fix and reach the shell."]}],[{"l":"rEFInd Installation"},{"i":"what-is-refind","l":"What is rEFInd?","p":["rEFInd is a GUI based boot manager for UEFI and EFI-based machines. It can be used to boot multiple operating systems that are installed on a single device. It also provide some basic theme Customisation options."]},{"l":"Installation","p":["Now we are gonna learn how to install rEFInd from both Windows and Linux. Please note that it is recommended to know how to use terminal and have basic knowledge of partition in order to install rEFInd."]},{"l":"Getting rEFInd","p":["If you'r in Linux you can use terminal-installation(recommended) or even install it manually from here(downlaod latest zip file). If you'r in windows, you have to install refind packages and some other softwares manually. Install rEFInd from here(downlaod latest zip file) and EasyUEFI from here."]},{"l":"Preparation","p":["Before moving forward we first need to do some minor preparation for both Windows and Linux users who want to install rEFInd manually. After downlading rEFInd package, Extract it to your Desktop and rename it to \"refind\", open it, edit refind.conf and add the following text at the end of the file.","Edit the location of required files if you have installed your OS in any other custom location."]},{"l":"Windows Installation","p":["If you done downloading all required packages for windows, we're good-to-go for further steps.","First extract EasyUEFI to your desktop and copy refind folder to c: drive.","Setup EasyUEFI on your system and run it as administrator.","Now open Manage EFI System Partition> EFI System Partition Explorer in EasyUFI and select your fat32 EFI partition, which is most likely 500 MB in size. open it!","Right click on \\ directory and select upload. Now select the refind file you copied in c: drive and click ok. This will add refind file to \\ directory.","Click on Exit> Home to go back to main screen, select Manage EFI Boot Options and click on Create new entry(Button with small '+' sign).","After new popup appears, setlect the Type as Unix or Other OS, Type \"refind\" in Description and navigate to fat32 EFI partition, select \\refind\\refind_x64.efi for 64 bit or \\refind\\refind_ia32.efi for 32 bit CPUs and click ok to save changes.","Now a new boot entry with name \"refind\" will be created, select it and click on move up(button with small up arrow), click it untill \"refind\" boot menu reach at the top of all other boot menus. This will set rEFInd as our default bootloader.","Lastly click on Home button and then close the EasyUEFI program."]},{"i":"if-refind-doest-bootup","l":"If rEFInd does't bootup","p":["Reboot to bios and select boot Sequence.If refind is already on the top of every other boot entry then click on save else select refind, click up arrow untill refind reaches the top of all other boot entries and then Save it."]},{"l":"Linux Installation","p":["You can install rEFInd on linux via terminal or even manually."]},{"l":"Install through terminal","p":["Press CTRL + ALT + T to open terminal and then type these commands-","If you're fedora, Mageia or other linux user then follow these steps-","Go to this link and download latest rpm or deb file according to your system.","If you install rpm file then cd to file and type sudo rpm -i refind*.rpm","If you install dbm file then cd to file and type sudo dpkg -i refind*.deb","rEFInd instllation start automatically if not then type-","Now after your rEFInd is installed on your distro, open any filemanager as root and navigate to /boot/efi/EFI/refind.","Edit refind.conf and add following text at the end of the file-","Edit the location of required files if you have installed your OS in any other custom location.","Save the file and reboot."]},{"l":"Install manually","p":["If you done all Preparation, follow these steps-","Copy \"refind\" folder we extracted in Desktop.","Open any filemanger as root and copy \"refind\" file to /boot/efi/EFI/refind.","now reboot to bios and select boot Sequence, click on New Entry button and name it \"refind\" and select location of the boot file /EFI/refind/refind_x64.efi for 64 bit or \\refind\\refind_ia32.efi for 32 bit CPUs.","Now click on save, select refind and click up arrow untill refind reaches the top of all other boot options.","Now reboot!"]},{"i":"finally","l":"Finally!!","p":["And thats it! We have successfully installed rEFInd."]}]]